# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "petition_details"}, {"type": "pay", "name": "mbr_payment"}], "name": "set_petition_details", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "mbr_payment"}], "name": "sign_petition", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "set_snapshot_round", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address[])", "name": "accounts", "struct": "AccountSet"}], "name": "reset_flags_for_recount", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address[])", "name": "accounts", "struct": "AccountSet"}], "name": "accumulate_weight_for_snapshot_round", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "SnapshotPetition", "state": {"keys": {"box": {}, "global": {"total_petitioners": {"key": "dG90YWxfcGV0aXRpb25lcnM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "last_snapshot_total_valid_petitioners": {"key": "bGFzdF9zbmFwc2hvdF90b3RhbF92YWxpZF9wZXRpdGlvbmVycw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "last_snapshot_round": {"key": "bGFzdF9zbmFwc2hvdF9yb3VuZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "last_snapshot_weight_in_algo": {"key": "bGFzdF9zbmFwc2hvdF93ZWlnaHRfaW5fYWxnbw==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"signer_box": {"keyType": "Signer", "valueType": "SignatureCountedFlag", "prefix": ""}, "petition_details": {"keyType": "AVMString", "valueType": "AVMString", "prefix": "UA=="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 4}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"AccountSet": [{"name": "accounts", "type": "address[]"}], "SignatureCountedFlag": [{"name": "flag", "type": "bool"}], "Signer": [{"name": "address", "type": "address"}]}, "byteCode": {"approval": "CyAEAAEgkAMmBhNsYXN0X3NuYXBzaG90X3JvdW5kJWxhc3Rfc25hcHNob3RfdG90YWxfdmFsaWRfcGV0aXRpb25lcnMcbGFzdF9zbmFwc2hvdF93ZWlnaHRfaW5fYWxnbxF0b3RhbF9wZXRpdGlvbmVycxFQUGV0aXRpb24gRGV0YWlscwEAMRhAAAwrImcpImcoImcqImcxG0EAiIIFBEXPGkQEStGryAQzfvCdBAm8l1kEG7bm9zYaAI4FAEIALAAgABEAAiJDMRkURDEYRDYaAYgBUCNDMRkURDEYRDYaAYgBAiNDMRkURDEYRIgA4CNDMRkURDEYRDEWIwlJOBAjEkSIAHIjQzEZFEQxGEQ2GgFXAgAxFiMJSTgQIxJEiAAUI0MxGUD/nTEYFEQjQzEAMgkSRImKAgCI//MnBL1FARREi/+IACSL/hWBEQglC4HEEwiL/zgISwEPRIv/TIgATCcEvEgnBIv+v4mKAQCL/zgHMgoSRImKAQCL/4j/7DEAFSMIJQuBxBMIi/84CEsBD0SL/0yIABUxAEm9RQEURCcFvyIrZUQjCCtMZ4mKAgCL/jgISYv/DUEAE7ExAIsAi/8JsgiyByOyECKyAbOJiP9cIihlRDIGE0QpImcqImcoMgZniYoBAIj/QzIGIihlRBNEi/8iWYv/FYv/TgJSSSJZIosCiwEMQQAYiwBXAgCLAklOAiQLJFgnBb8jCIwCQv/giYoBACKAAEcFiP7/MgYiKGVEEkSL/yJZi/8Vi/9OAlJJIlkiiwmLCAxBAJWLB1cCAIsJJAskWEmMAEm+RCcFEkRJgAGAv0lzAEyMAUQijAIijAQijAVzDEhBAAMjjAKLAHMARIGAreIEDUEAAyOMBIsAcw5MjAOLBYwGQQAUMgaLAwmBsOQDDUEAAyOMBYsFjAaLBowFiwJBAB2LBEEAGIsFQQATIiplRIsBCCpMZyIpZUQjCClMZ4sJIwiMCUL/Y4k=", "clear": "C4EBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 4, "patch": 2}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [538, 603], "errorMessage": "Index access is out of bounds"}, {"pc": [204, 219, 234, 246, 268], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [417], "errorMessage": "User has already signed this petition"}, {"pc": [625, 648], "errorMessage": "account funded"}, {"pc": [301], "errorMessage": "can only call when creating"}, {"pc": [207, 222, 237, 249, 271], "errorMessage": "can only call when not creating"}, {"pc": [471, 498, 566], "errorMessage": "check self.last_snapshot_round exists"}, {"pc": [727], "errorMessage": "check self.last_snapshot_total_valid_petitioners exists"}, {"pc": [717], "errorMessage": "check self.last_snapshot_weight_in_algo exists"}, {"pc": [609], "errorMessage": "check self.signer_box entry exists"}, {"pc": [424], "errorMessage": "check self.total_petitioners exists"}, {"pc": [259, 287], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class AccountSet:
    """Struct for AccountSet"""
    accounts: list[str]

@dataclasses.dataclass(frozen=True)
class SignatureCountedFlag:
    """Struct for SignatureCountedFlag"""
    flag: bool

@dataclasses.dataclass(frozen=True)
class Signer:
    """Struct for Signer"""
    address: str


@dataclasses.dataclass(frozen=True, kw_only=True)
class SetPetitionDetailsArgs:
    """Dataclass for set_petition_details arguments"""
    petition_details: str
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "set_petition_details(string,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SignPetitionArgs:
    """Dataclass for sign_petition arguments"""
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "sign_petition(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ResetFlagsForRecountArgs:
    """Dataclass for reset_flags_for_recount arguments"""
    accounts: AccountSet

    @property
    def abi_method_signature(self) -> str:
        return "reset_flags_for_recount((address[]))void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AccumulateWeightForSnapshotRoundArgs:
    """Dataclass for accumulate_weight_for_snapshot_round arguments"""
    accounts: AccountSet

    @property
    def abi_method_signature(self) -> str:
        return "accumulate_weight_for_snapshot_round((address[]))void"


class SnapshotPetitionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def set_petition_details(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SetPetitionDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_petition_details(string,pay)void",
            "args": method_args,
        }))

    def sign_petition(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SignPetitionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sign_petition(pay)void",
            "args": method_args,
        }))

    def set_snapshot_round(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_snapshot_round()void",
        }))

    def reset_flags_for_recount(
        self,
        args: tuple[AccountSet] | ResetFlagsForRecountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_flags_for_recount((address[]))void",
            "args": method_args,
        }))

    def accumulate_weight_for_snapshot_round(
        self,
        args: tuple[AccountSet] | AccumulateWeightForSnapshotRoundArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "accumulate_weight_for_snapshot_round((address[]))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class SnapshotPetitionCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def set_petition_details(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SetPetitionDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_petition_details(string,pay)void",
            "args": method_args,
        }))

    def sign_petition(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SignPetitionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sign_petition(pay)void",
            "args": method_args,
        }))

    def set_snapshot_round(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_snapshot_round()void",
        }))

    def reset_flags_for_recount(
        self,
        args: tuple[AccountSet] | ResetFlagsForRecountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_flags_for_recount((address[]))void",
            "args": method_args,
        }))

    def accumulate_weight_for_snapshot_round(
        self,
        args: tuple[AccountSet] | AccumulateWeightForSnapshotRoundArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "accumulate_weight_for_snapshot_round((address[]))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class SnapshotPetitionSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def set_petition_details(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SetPetitionDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_petition_details(string,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def sign_petition(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SignPetitionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sign_petition(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_snapshot_round(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_snapshot_round()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def reset_flags_for_recount(
        self,
        args: tuple[AccountSet] | ResetFlagsForRecountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reset_flags_for_recount((address[]))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def accumulate_weight_for_snapshot_round(
        self,
        args: tuple[AccountSet] | AccumulateWeightForSnapshotRoundArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "accumulate_weight_for_snapshot_round((address[]))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    total_petitioners: int
    last_snapshot_total_valid_petitioners: int
    last_snapshot_round: int
    last_snapshot_weight_in_algo: int

class SnapshotPetitionState:
    """Methods to access state for the current SnapshotPetition app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def total_petitioners(self) -> int:
        """Get the current value of the total_petitioners key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_petitioners")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def last_snapshot_total_valid_petitioners(self) -> int:
        """Get the current value of the last_snapshot_total_valid_petitioners key in global_state state"""
        value = self.app_client.state.global_state.get_value("last_snapshot_total_valid_petitioners")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def last_snapshot_round(self) -> int:
        """Get the current value of the last_snapshot_round key in global_state state"""
        value = self.app_client.state.global_state.get_value("last_snapshot_round")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def last_snapshot_weight_in_algo(self) -> int:
        """Get the current value of the last_snapshot_weight_in_algo key in global_state state"""
        value = self.app_client.state.global_state.get_value("last_snapshot_weight_in_algo")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "SignatureCountedFlag": SignatureCountedFlag
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def signer_box(self) -> "_MapState[Signer, SignatureCountedFlag]":
        """Get values from the signer_box map in box state"""
        return _MapState(
            self.app_client.state.box,
            "signer_box",
            self._struct_classes.get("SignatureCountedFlag")
        )

    @property
    def petition_details(self) -> "_MapState[str, str]":
        """Get values from the petition_details map in box state"""
        return _MapState(
            self.app_client.state.box,
            "petition_details",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class SnapshotPetitionClient:
    """Client for interacting with SnapshotPetition smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SnapshotPetitionParams(self.app_client)
        self.create_transaction = SnapshotPetitionCreateTransactionParams(self.app_client)
        self.send = SnapshotPetitionSend(self.app_client)
        self.state = SnapshotPetitionState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SnapshotPetitionClient":
        return SnapshotPetitionClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SnapshotPetitionClient":
        return SnapshotPetitionClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SnapshotPetitionClient":
        return SnapshotPetitionClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SnapshotPetitionComposer":
        return SnapshotPetitionComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_petition_details(string,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["sign_petition(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_snapshot_round()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["reset_flags_for_recount((address[]))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["accumulate_weight_for_snapshot_round((address[]))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SnapshotPetitionBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating SnapshotPetition contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class SnapshotPetitionFactory(algokit_utils.TypedAppFactoryProtocol[SnapshotPetitionBareCallCreateParams, None, None]):
    """Factory for deploying and managing SnapshotPetitionClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SnapshotPetitionFactoryParams(self.app_factory)
        self.create_transaction = SnapshotPetitionFactoryCreateTransaction(self.app_factory)
        self.send = SnapshotPetitionFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SnapshotPetitionBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SnapshotPetitionClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SnapshotPetitionClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SnapshotPetitionClient:
        """Get an app client by creator address and name"""
        return SnapshotPetitionClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SnapshotPetitionClient:
        """Get an app client by app ID"""
        return SnapshotPetitionClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SnapshotPetitionFactoryParams:
    """Parameters for creating transactions for SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SnapshotPetitionFactoryCreateParams(app_factory)
        self.update = SnapshotPetitionFactoryUpdateParams(app_factory)
        self.delete = SnapshotPetitionFactoryDeleteParams(app_factory)

class SnapshotPetitionFactoryCreateParams:
    """Parameters for 'create' operations of SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def set_petition_details(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SetPetitionDetailsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_petition_details(string,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_petition_details(string,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def sign_petition(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SignPetitionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the sign_petition(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "sign_petition(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_snapshot_round(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_snapshot_round()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_snapshot_round()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def reset_flags_for_recount(
        self,
        args: tuple[AccountSet] | ResetFlagsForRecountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the reset_flags_for_recount((address[]))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "reset_flags_for_recount((address[]))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def accumulate_weight_for_snapshot_round(
        self,
        args: tuple[AccountSet] | AccumulateWeightForSnapshotRoundArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the accumulate_weight_for_snapshot_round((address[]))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "accumulate_weight_for_snapshot_round((address[]))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class SnapshotPetitionFactoryUpdateParams:
    """Parameters for 'update' operations of SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SnapshotPetitionFactoryDeleteParams:
    """Parameters for 'delete' operations of SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SnapshotPetitionFactoryCreateTransaction:
    """Create transactions for SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SnapshotPetitionFactoryCreateTransactionCreate(app_factory)


class SnapshotPetitionFactoryCreateTransactionCreate:
    """Create new instances of SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SnapshotPetitionFactorySend:
    """Send calls to SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SnapshotPetitionFactorySendCreate(app_factory)


class SnapshotPetitionFactorySendCreate:
    """Send create calls to SnapshotPetition contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SnapshotPetitionClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SnapshotPetitionClient(result[0]), result[1]


class SnapshotPetitionComposer:
    """Composer for creating transaction groups for SnapshotPetition contract calls"""

    def __init__(self, client: "SnapshotPetitionClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def set_petition_details(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SetPetitionDetailsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SnapshotPetitionComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_petition_details(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_petition_details(string,pay)void", v
            )
        )
        return self

    def sign_petition(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SignPetitionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SnapshotPetitionComposer":
        self._composer.add_app_call_method_call(
            self.client.params.sign_petition(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "sign_petition(pay)void", v
            )
        )
        return self

    def set_snapshot_round(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SnapshotPetitionComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_snapshot_round(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_snapshot_round()void", v
            )
        )
        return self

    def reset_flags_for_recount(
        self,
        args: tuple[AccountSet] | ResetFlagsForRecountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SnapshotPetitionComposer":
        self._composer.add_app_call_method_call(
            self.client.params.reset_flags_for_recount(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "reset_flags_for_recount((address[]))void", v
            )
        )
        return self

    def accumulate_weight_for_snapshot_round(
        self,
        args: tuple[AccountSet] | AccumulateWeightForSnapshotRoundArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SnapshotPetitionComposer":
        self._composer.add_app_call_method_call(
            self.client.params.accumulate_weight_for_snapshot_round(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "accumulate_weight_for_snapshot_round((address[]))void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SnapshotPetitionComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SnapshotPetitionComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
