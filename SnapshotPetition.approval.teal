#pragma version 11
#pragma typetrack false

// contract.SnapshotPetition.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 32 400
    bytecblock "last_snapshot_round" "last_snapshot_total_valid_petitioners" "last_snapshot_weight_in_algo" "total_petitioners" "PPetition Details" 0x00
    txn ApplicationID
    bnz main_after_if_else@2
    // contract.py:16
    // self.total_petitioners = UInt64(0)
    bytec_3 // "total_petitioners"
    intc_0 // 0
    app_global_put
    // contract.py:17
    // self.last_snapshot_total_valid_petitioners = UInt64(0)
    bytec_1 // "last_snapshot_total_valid_petitioners"
    intc_0 // 0
    app_global_put
    // contract.py:18
    // self.last_snapshot_round = UInt64(0)
    bytec_0 // "last_snapshot_round"
    intc_0 // 0
    app_global_put
    // contract.py:19
    // self.last_snapshot_weight_in_algo = UInt64(0)
    bytec_2 // "last_snapshot_weight_in_algo"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // contract.py:14
    // class SnapshotPetition(ARC4Contract, avm_version=11):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x45cf1a44 0x4ad1abc8 0x337ef09d 0x09bc9759 0x1bb6e6f7 // method "set_petition_details(string,pay)void", method "sign_petition(pay)void", method "set_snapshot_round()void", method "reset_flags_for_recount((address[]))void", method "accumulate_weight_for_snapshot_round((address[]))void"
    txna ApplicationArgs 0
    match main_set_petition_details_route@5 main_sign_petition_route@6 main_set_snapshot_round_route@7 main_reset_flags_for_recount_route@8 main_accumulate_weight_for_snapshot_round_route@9

main_after_if_else@12:
    // contract.py:14
    // class SnapshotPetition(ARC4Contract, avm_version=11):
    intc_0 // 0
    return

main_accumulate_weight_for_snapshot_round_route@9:
    // contract.py:150
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract.py:14
    // class SnapshotPetition(ARC4Contract, avm_version=11):
    txna ApplicationArgs 1
    // contract.py:150
    // @abimethod
    callsub accumulate_weight_for_snapshot_round
    intc_1 // 1
    return

main_reset_flags_for_recount_route@8:
    // contract.py:136
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract.py:14
    // class SnapshotPetition(ARC4Contract, avm_version=11):
    txna ApplicationArgs 1
    // contract.py:136
    // @abimethod
    callsub reset_flags_for_recount
    intc_1 // 1
    return

main_set_snapshot_round_route@7:
    // contract.py:124
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub set_snapshot_round
    intc_1 // 1
    return

main_sign_petition_route@6:
    // contract.py:77
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract.py:14
    // class SnapshotPetition(ARC4Contract, avm_version=11):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // contract.py:77
    // @abimethod
    callsub sign_petition
    intc_1 // 1
    return

main_set_petition_details_route@5:
    // contract.py:29
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract.py:14
    // class SnapshotPetition(ARC4Contract, avm_version=11):
    txna ApplicationArgs 1
    extract 2 0
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // contract.py:29
    // @abimethod
    callsub set_petition_details
    intc_1 // 1
    return

main_bare_routing@10:
    // contract.py:14
    // class SnapshotPetition(ARC4Contract, avm_version=11):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contract.SnapshotPetition.is_creator() -> void:
is_creator:
    // contract.py:27
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub


// contract.SnapshotPetition.set_petition_details(petition_details: bytes, mbr_payment: uint64) -> void:
set_petition_details:
    // contract.py:29-34
    // @abimethod
    // def set_petition_details(
    //     self,
    //     petition_details: String,
    //     mbr_payment: gtxn.PaymentTransaction
    // ) -> None:
    proto 2 0
    // contract.py:36
    // self.is_creator()
    callsub is_creator
    // contract.py:46
    // assert String('Petition Details') not in self.petition_details
    bytec 4 // "PPetition Details"
    box_len
    bury 1
    !
    assert
    // contract.py:63
    // self.contract_is_receiver(mbr_payment)
    frame_dig -1
    callsub contract_is_receiver
    // contract.py:67
    // box_value_byte_len = petition_details.bytes.length
    frame_dig -2
    len
    // contract.py:68
    // total_bytes_cost = (prefix_len + box_name_byte_len + box_value_byte_len) * 400
    pushint 17 // 17
    +
    intc_3 // 400
    *
    // contract.py:69
    // create_box_cost = UInt64(2500)
    pushint 2500 // 2500
    // contract.py:70
    // total_cost = total_bytes_cost + create_box_cost
    +
    // contract.py:72
    // assert mbr_payment.amount >= total_cost
    frame_dig -1
    gtxns Amount
    dig 1
    >=
    assert
    // contract.py:74
    // self.refund_excess_mbr(mbr_payment, total_cost)
    frame_dig -1
    swap
    callsub refund_excess_mbr
    // contract.py:39
    // self.petition_details[String('Petition Details')] = petition_details
    bytec 4 // "PPetition Details"
    box_del
    pop
    bytec 4 // "PPetition Details"
    frame_dig -2
    box_put
    retsub


// contract.SnapshotPetition.contract_is_receiver(mbr_payment: uint64) -> void:
contract_is_receiver:
    // contract.py:48-52
    // @subroutine
    // def contract_is_receiver(
    //     self,
    //     mbr_payment: gtxn.PaymentTransaction
    // ) -> None:
    proto 1 0
    // contract.py:54
    // assert mbr_payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    retsub


// contract.SnapshotPetition.sign_petition(mbr_payment: uint64) -> void:
sign_petition:
    // contract.py:77-81
    // @abimethod
    // def sign_petition(
    //     self,
    //     mbr_payment: gtxn.PaymentTransaction
    // ) -> None:
    proto 1 0
    // contract.py:98
    // self.contract_is_receiver(mbr_payment)
    frame_dig -1
    callsub contract_is_receiver
    // contract.py:100
    // box_name_byte_len = Txn.sender.bytes.length
    txn Sender
    len
    // contract.py:101
    // box_value_byte_len = UInt64(1)
    intc_1 // 1
    // contract.py:102
    // total_bytes_cost = (box_name_byte_len + box_value_byte_len) * 400
    +
    intc_3 // 400
    *
    // contract.py:103
    // create_box_cost = UInt64(2500)
    pushint 2500 // 2500
    // contract.py:104
    // total_cost = total_bytes_cost + create_box_cost
    +
    // contract.py:106
    // assert mbr_payment.amount >= total_cost
    frame_dig -1
    gtxns Amount
    dig 1
    >=
    assert
    // contract.py:108
    // self.refund_excess_mbr(mbr_payment, total_cost)
    frame_dig -1
    swap
    callsub refund_excess_mbr
    // contract.py:84
    // signer = Signer(Address(Txn.sender))
    txn Sender
    // contract.py:86
    // assert signer not in self.signer_box, "User has already signed this petition"
    dup
    box_len
    bury 1
    !
    assert // User has already signed this petition
    // contract.py:88
    // self.signer_box[signer] = SignatureCountedFlag(Bool(False))
    bytec 5 // 0x00
    box_put
    // contract.py:89
    // self.total_petitioners += 1
    intc_0 // 0
    bytec_3 // "total_petitioners"
    app_global_get_ex
    assert // check self.total_petitioners exists
    intc_1 // 1
    +
    bytec_3 // "total_petitioners"
    swap
    app_global_put
    retsub


// contract.SnapshotPetition.refund_excess_mbr(mbr_payment: uint64, total_cost: uint64) -> void:
refund_excess_mbr:
    // contract.py:110-115
    // @subroutine
    // def refund_excess_mbr(
    //     self,
    //     mbr_payment: gtxn.PaymentTransaction,
    //     total_cost: UInt64
    // ) -> None:
    proto 2 0
    // contract.py:117
    // if mbr_payment.amount > total_cost:
    frame_dig -2
    gtxns Amount
    dup
    frame_dig -1
    >
    bz refund_excess_mbr_after_if_else@3
    // contract.py:118-121
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=mbr_payment.amount - total_cost
    // ).submit()
    itxn_begin
    // contract.py:119
    // receiver=Txn.sender,
    txn Sender
    // contract.py:120
    // amount=mbr_payment.amount - total_cost
    frame_dig 0
    frame_dig -1
    -
    itxn_field Amount
    itxn_field Receiver
    // contract.py:118
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contract.py:118-121
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=mbr_payment.amount - total_cost
    // ).submit()
    itxn_submit

refund_excess_mbr_after_if_else@3:
    retsub


// contract.SnapshotPetition.set_snapshot_round() -> void:
set_snapshot_round:
    // contract.py:129
    // self.is_creator()
    callsub is_creator
    // contract.py:130
    // assert self.last_snapshot_round != Global.round
    intc_0 // 0
    bytec_0 // "last_snapshot_round"
    app_global_get_ex
    assert // check self.last_snapshot_round exists
    global Round
    !=
    assert
    // contract.py:132
    // self.last_snapshot_total_valid_petitioners = UInt64(0)
    bytec_1 // "last_snapshot_total_valid_petitioners"
    intc_0 // 0
    app_global_put
    // contract.py:133
    // self.last_snapshot_weight_in_algo = UInt64(0)
    bytec_2 // "last_snapshot_weight_in_algo"
    intc_0 // 0
    app_global_put
    // contract.py:134
    // self.last_snapshot_round = Global.round
    bytec_0 // "last_snapshot_round"
    global Round
    app_global_put
    retsub


// contract.SnapshotPetition.reset_flags_for_recount(accounts: bytes) -> void:
reset_flags_for_recount:
    // contract.py:136-140
    // @abimethod
    // def reset_flags_for_recount(
    //     self,
    //     accounts: AccountSet
    // ) -> None:
    proto 1 0
    // contract.py:142
    // self.is_creator()
    callsub is_creator
    // contract.py:143
    // assert Global.round != self.last_snapshot_round
    global Round
    intc_0 // 0
    bytec_0 // "last_snapshot_round"
    app_global_get_ex
    assert // check self.last_snapshot_round exists
    !=
    assert
    // contract.py:145
    // for i in urange(accounts.accounts.length):
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    cover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0

reset_flags_for_recount_for_header@1:
    // contract.py:145
    // for i in urange(accounts.accounts.length):
    frame_dig 2
    frame_dig 1
    <
    bz reset_flags_for_recount_after_for@4
    // contract.py:146
    // signer = Signer(accounts.accounts[i])
    frame_dig 0
    extract 2 0
    frame_dig 2
    dup
    cover 2
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    // contract.py:147
    // self.signer_box[signer] = SignatureCountedFlag(Bool(False))
    bytec 5 // 0x00
    box_put
    // contract.py:145
    // for i in urange(accounts.accounts.length):
    intc_1 // 1
    +
    frame_bury 2
    b reset_flags_for_recount_for_header@1

reset_flags_for_recount_after_for@4:
    retsub


// contract.SnapshotPetition.accumulate_weight_for_snapshot_round(accounts: bytes) -> void:
accumulate_weight_for_snapshot_round:
    // contract.py:150-154
    // @abimethod
    // def accumulate_weight_for_snapshot_round(
    //     self,
    //     accounts: AccountSet
    // ) -> None:
    proto 1 0
    intc_0 // 0
    pushbytes ""
    dupn 5
    // contract.py:156
    // self.is_creator()
    callsub is_creator
    // contract.py:157
    // assert Global.round == self.last_snapshot_round
    global Round
    intc_0 // 0
    bytec_0 // "last_snapshot_round"
    app_global_get_ex
    assert // check self.last_snapshot_round exists
    ==
    assert
    // contract.py:159
    // for i in urange(accounts.accounts.length):
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    cover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0

accumulate_weight_for_snapshot_round_for_header@1:
    // contract.py:159
    // for i in urange(accounts.accounts.length):
    frame_dig 9
    frame_dig 8
    <
    bz accumulate_weight_for_snapshot_round_after_for@16
    // contract.py:161
    // address = accounts.accounts[i]
    frame_dig 7
    extract 2 0
    frame_dig 9
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 0
    // contract.py:163
    // assert self.signer_box[signer] == SignatureCountedFlag(Bool(False))
    dup
    box_get
    assert // check self.signer_box entry exists
    bytec 5 // 0x00
    ==
    assert
    // contract.py:165
    // self.signer_box[signer] = SignatureCountedFlag(Bool(True))
    dup
    pushbytes 0x80
    box_put
    // contract.py:168
    // current_balance = account.balance
    dup
    acct_params_get AcctBalance
    swap
    frame_bury 1
    assert // account funded
    // contract.py:170
    // incentive_eligible = False
    intc_0 // 0
    frame_bury 2
    // contract.py:171
    // sufficient_balance = False
    intc_0 // 0
    frame_bury 4
    // contract.py:172
    // sufficient_last_heartbeat = False
    intc_0 // 0
    frame_bury 5
    // contract.py:174-175
    // #Check if the account is incentive eligible for this snapshot
    // if op.AcctParamsGet.acct_incentive_eligible(account)[0]:
    acct_params_get AcctIncentiveEligible
    pop
    bz accumulate_weight_for_snapshot_round_after_if_else@4
    // contract.py:176
    // incentive_eligible = True
    intc_1 // 1
    frame_bury 2

accumulate_weight_for_snapshot_round_after_if_else@4:
    // contract.py:178-179
    // #Check if the account holds more than 10 Algo for this snapshot
    // if account.balance > 10_000_000:
    frame_dig 0
    acct_params_get AcctBalance
    assert // account funded
    pushint 10000000 // 10000000
    >
    bz accumulate_weight_for_snapshot_round_after_if_else@6
    // contract.py:180
    // sufficient_balance = True
    intc_1 // 1
    frame_bury 4

accumulate_weight_for_snapshot_round_after_if_else@6:
    // contract.py:197
    // last_heartbeat_round, has_a_last_heartbeat_round = op.AcctParamsGet.acct_last_heartbeat(account)
    frame_dig 0
    acct_params_get AcctLastHeartbeat
    swap
    frame_bury 3
    frame_dig 5
    frame_bury 6
    // contract.py:198
    // if has_a_last_heartbeat_round:
    bz accumulate_weight_for_snapshot_round_after_if_else@10
    // contract.py:199
    // if Global.round - last_heartbeat_round > 62_000:
    global Round
    frame_dig 3
    -
    pushint 62000 // 62000
    >
    bz accumulate_weight_for_snapshot_round_after_if_else@9
    // contract.py:200
    // sufficient_last_heartbeat = True
    intc_1 // 1
    frame_bury 5

accumulate_weight_for_snapshot_round_after_if_else@9:
    frame_dig 5
    frame_bury 6

accumulate_weight_for_snapshot_round_after_if_else@10:
    frame_dig 6
    frame_bury 5
    // contract.py:202-203
    // # You may customize this as you wish
    // if incentive_eligible and sufficient_balance and sufficient_last_heartbeat:
    frame_dig 2
    bz accumulate_weight_for_snapshot_round_after_if_else@14
    frame_dig 4
    bz accumulate_weight_for_snapshot_round_after_if_else@14
    frame_dig 5
    bz accumulate_weight_for_snapshot_round_after_if_else@14
    // contract.py:204
    // self.last_snapshot_weight_in_algo += current_balance
    intc_0 // 0
    bytec_2 // "last_snapshot_weight_in_algo"
    app_global_get_ex
    assert // check self.last_snapshot_weight_in_algo exists
    frame_dig 1
    +
    bytec_2 // "last_snapshot_weight_in_algo"
    swap
    app_global_put
    // contract.py:205
    // self.last_snapshot_total_valid_petitioners += 1
    intc_0 // 0
    bytec_1 // "last_snapshot_total_valid_petitioners"
    app_global_get_ex
    assert // check self.last_snapshot_total_valid_petitioners exists
    intc_1 // 1
    +
    bytec_1 // "last_snapshot_total_valid_petitioners"
    swap
    app_global_put

accumulate_weight_for_snapshot_round_after_if_else@14:
    // contract.py:159
    // for i in urange(accounts.accounts.length):
    frame_dig 9
    intc_1 // 1
    +
    frame_bury 9
    b accumulate_weight_for_snapshot_round_for_header@1

accumulate_weight_for_snapshot_round_after_for@16:
    retsub
