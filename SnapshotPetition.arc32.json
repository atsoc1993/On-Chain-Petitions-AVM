{
    "hints": {
        "set_petition_details(string,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sign_petition(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_snapshot_round()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reset_flags_for_recount((address[]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "accounts": {
                    "name": "AccountSet",
                    "elements": [
                        [
                            "accounts",
                            "address[]"
                        ]
                    ]
                }
            }
        },
        "accumulate_weight_for_snapshot_round((address[]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "accounts": {
                    "name": "AccountSet",
                    "elements": [
                        [
                            "accounts",
                            "address[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "last_snapshot_round": {
                    "type": "uint64",
                    "key": "last_snapshot_round"
                },
                "last_snapshot_total_valid_petitioners": {
                    "type": "uint64",
                    "key": "last_snapshot_total_valid_petitioners"
                },
                "last_snapshot_weight_in_algo": {
                    "type": "uint64",
                    "key": "last_snapshot_weight_in_algo"
                },
                "total_petitioners": {
                    "type": "uint64",
                    "key": "total_petitioners"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SnapshotPetition",
        "methods": [
            {
                "name": "set_petition_details",
                "args": [
                    {
                        "type": "string",
                        "name": "petition_details"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sign_petition",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_snapshot_round",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reset_flags_for_recount",
                "args": [
                    {
                        "type": "(address[])",
                        "name": "accounts"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "accumulate_weight_for_snapshot_round",
                "args": [
                    {
                        "type": "(address[])",
                        "name": "accounts"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}